#!/usr/bin/env python3

import getpass
import os
import sys

from subprocess import call

home = '{}/'.format(os.path.expanduser('~'))
user = getpass.getuser()
dotroot = home + ".dotfiles"


def data_sync():
    import csv
    pkg_backup()

    with open(home + ".backup") as file:
        for line in file:
            for l in csv.reader([line], delimiter=' ', quotechar='"'):
                remote = l[0]
                local = l[1]
                sudo = ""
            if sys.argv[2] == "-r":
                try:
                    sudo = l[2]
                except:
                    pass
                call(sudo + " rsync -ahP --delete --info=progress2 --stats \"" + remote + "\" \"" + os.path.dirname(local) + "\"", shell=True)
            else:
                call("rsync -ahP --delete --info=progress2 --stats \"" + local + "\" \"" + os.path.dirname(remote) + "\"", shell=True)


def dot_backup():
    import shutil
    file = sys.argv[2]

    if os.path.islink(file):
        sys.exit()

    parent = "/".join(file.strip("/").split('/')[:1])

    if parent == "home":
        dotpath = dotroot + "/home/" + "/".join(file.strip("/").split('/')[2:])
    else:
        dotpath = dotroot + "/root" + file

    dotdir = os.path.dirname(dotpath)
    if not os.path.exists(dotdir):
        os.makedirs(dotdir)

    shutil.move(file, dotpath)
    os.symlink(dotpath, file)


def dot_restore():
    import shutil
    file = sys.argv[2]

    parent = os.path.relpath(file, dotroot)
    parent = "/".join(parent.strip("/").split('/')[:1])

    if parent == "home":
        target = home + os.path.relpath(file, dotroot + "/home")
    else:
        target = "/" + os.path.relpath(file, dotroot + "/root")

    targetdir = os.path.dirname(target)
    if not os.path.exists(targetdir):
        os.makedirs(targetdir)

    if os.path.exists(target):
        shutil.copymode(target, file)
        try:
            os.remove(target)
        except:
            shutil.rmtree(target)
    os.symlink(file, target)
    shutil.chown(target, 'root', 'root')


def pkg_backup():
    call("pacman -Qqen > ~/.dotfiles/misc/packages/native", shell=True)
    call("pacman -Qqem > ~/.dotfiles/misc/packages/foreign", shell=True)
    call("pip freeze > ~/.dotfiles/misc/packages/python", shell=True)


def pkg_restore():
    call("sudo pacman -Syy", shell=True)
    call("sudo pacman -S --needed - < ~/.dotfiles/misc/packages/native", shell=True)

    f = open(home + ".dotfiles/misc/packages/foreign", "r")
    lines = f.readlines()
    f.close()
    f = open("/tmp/foreign", "w")
    for line in lines:
        if line != user + "-arch-scripts" + "\n":
            f.write(line)
    f.close()

    call("pacaur -Su --devel --needed - < /tmp/foreign", shell=True)
    call("sudo pip install --upgrade pip && sudo pip install --upgrade -r < ~/.dotfiles/misc/packages/python", shell=True)


def collections_backup():
    hdd = "/run/media/" + user + "/FX"
    if os.path.exists(hdd):
        call("tree " + hdd + "/Movies > ~/.dotfiles/misc/collections/movies", shell=True)
        call("tree -L 1 " + hdd + "/TV\ Shows > ~/.dotfiles/misc/collections/tv-shows", shell=True)


def main():
    if sys.argv[1] == "--data-sync":
        data_sync()
    elif sys.argv[1] == "--dot-backup":
        dot_backup()
    elif sys.argv[1] == "--dot-restore":
        dot_restore()
    elif sys.argv[1] == "--pkg-backup":
        pkg_backup()
    elif sys.argv[1] == "--pkg-restore":
        pkg_restore()
    elif sys.argv[1] == "--collections-backup":
        collections_backup()


main()
